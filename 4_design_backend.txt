리튼(litten) 크로스플랫폼 노트 앱 백엔드 설계서 - 2차 개발용

================================================================================

**중요: 이 문서는 2차 개발(스탠다드 버전, 7-9개월) 단계의 백엔드 시스템 설계입니다.**

1차 개발(무료 버전, 1-6개월)에서는 백엔드 없이 로컬 저장만 사용합니다.
- 음성, 텍스트, 필기 데이터는 모두 디바이스 로컬에 저장
- 사용자 로그인 불필요 (앱 고유 ID만 생성)
- 클라우드 동기화 미지원
- 광고는 AdMob 등 클라이언트 SDK로 표시

================================================================================

1. 2차 개발 백엔드 아키텍처 개요

1.1 전체 시스템 아키텍처

┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   Flutter App   │    │    Web App      │    │  Desktop App    │
│  (iOS/Android)  │    │   (Browser)     │    │ (Win/Mac/Linux) │
└─────────────────┘    └─────────────────┘    └─────────────────┘
         │                       │                       │
         └───────────────────────┼───────────────────────┘
                                 │
                    ┌─────────────────┐
                    │   API Gateway   │
                    │   (Rate Limit)  │
                    └─────────────────┘
                                 │
                    ┌─────────────────┐
                    │  Load Balancer  │
                    └─────────────────┘
                                 │
         ┌───────────────────────┼───────────────────────┐
         │                       │                       │
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   Auth Service  │    │   Note Service  │    │   File Service  │
│   (App ID 관리)  │    │   (CRUD/동기화) │    │  (업로드/다운로드)│
└─────────────────┘    └─────────────────┘    └─────────────────┘
         │                       │                       │
         └───────────────────────┼───────────────────────┘
                                 │
                    ┌─────────────────┐
                    │    MariaDB      │
                    │   (Primary DB)  │
                    └─────────────────┘

1.2 기술 스택

**Backend Framework**
- Java Spring Boot 3.x
- Java 17+ (LTS)
- Spring Security (JWT + 앱 ID 인증)
- Spring Data JPA (데이터베이스 접근)
- Spring Web (RESTful API)

**Database & Storage**
- MariaDB 10.11+ (메인 데이터베이스)
- Redis (캐시/세션 관리)
- AWS S3 (파일 저장소)

**Infrastructure**
- Docker (컨테이너화)
- Nginx (로드 밸런서/API Gateway)
- AWS EC2/ECS (배포 환경)

1.3 2차 개발 핵심 설계 원칙
- 이메일 기반 사용자 로그인: 1차의 앱 ID에서 실제 계정 시스템으로 전환
- RESTful API: 표준 HTTP 메서드와 상태 코드 사용
- 마이크로서비스: 기능별 독립적인 서비스 분리
- 클라우드 동기화: 로컬 데이터를 서버와 실시간 동기화
- 확장성: 수평 확장 가능한 무상태 서비스
- 보안성: 데이터 암호화 및 JWT 토큰 인증
- 구독 관리: 스탠다드 플랜 결제 및 광고 제거

================================================================================

2. 2차 개발 데이터베이스 설계

2.1 테이블 구조

-- 사용자 계정 정보 
CREATE TABLE `note_member` (
  `sequence` BIGINT(20) NOT NULL AUTO_INCREMENT COMMENT '회원pk',
  `uuid` VARCHAR(64) NULL COMMENT '계정UUID',
  `id` VARCHAR(128) NULL COMMENT '회원아이디',
  `password` VARCHAR(512) NULL COMMENT '직원 pw[단방향]',
  `id_insert_date_time` TIMESTAMP NULL DEFAULT NULL COMMENT 'ID 등록일시',
  `is_change_password` TINYINT(1) NOT NULL DEFAULT '0' COMMENT '패스워드 변경 여부',
  `change_password_date_time` TIMESTAMP NULL COMMENT '패스워드 변경 일시',
  `name` VARCHAR(64) NULL COMMENT '직원 이름',
  `name_english` VARCHAR(64) NULL COMMENT '직원 이름 영어',
  `mobile` VARCHAR(64) NULL COMMENT '직원 휴대전화',
  `mobile_type` VARCHAR(64) NULL COMMENT '직원 휴대전화 통신사',
  `mobile_verify_date_time` DATETIME NULL COMMENT '본인인증일시',
  `email` VARCHAR(64) NULL COMMENT '이메일',
  `state_code` VARCHAR(64) NULL COMMENT '활성화 상태',
  `insert_date_time` TIMESTAMP NULL DEFAULT current_timestamp() COMMENT '[직원]등록일시',
  `update_pk` BIGINT(20) NULL COMMENT '[직원]수정자 fk',
  `update_date_time` TIMESTAMP NULL COMMENT '[직원]수정일시',
  `insert_pk` BIGINT(20) NULL COMMENT '[직원]등록자 fk',
	PRIMARY KEY (`sequence`) USING BTREE,
	INDEX `index_of_id` (`id`) USING BTREE,
	INDEX `index_of_uuid` (`uuid`) USING BTREE,  
   INDEX `index_of_mobile` (`mobile`),
   INDEX `index_of_email` (`email`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT='회원';

-- 사용자 계정 정보 로그 
DROP TABLE IF EXISTS `note_member_log`;
CREATE TABLE `note_member_log` (
  `sequence_log` BIGINT(20) NOT NULL AUTO_INCREMENT COMMENT '계정로그',
  `sequence` BIGINT(20) NULL COMMENT '계정',
  `uuid` VARCHAR(64) NULL COMMENT '계정UUID',
  `id` VARCHAR(128) NULL COMMENT '회원아이디',
  `password` VARCHAR(512) NULL COMMENT '직원 pw[단방향]',
  `id_insert_date_time` TIMESTAMP NULL DEFAULT NULL COMMENT 'ID 등록일시',
  `is_change_password` TINYINT(1) NOT NULL DEFAULT '0' COMMENT '패스워드 변경 여부',
  `change_password_date_time` TIMESTAMP NULL COMMENT '패스워드 변경 일시',
  `name` VARCHAR(64) NULL COMMENT '직원 이름',
  `name_english` VARCHAR(64) NULL COMMENT '직원 이름 영어',
  `mobile` VARCHAR(64) NULL COMMENT '직원 휴대전화',
  `mobile_type` VARCHAR(64) NULL COMMENT '직원 휴대전화 통신사',
  `mobile_verify_date_time` DATETIME NULL COMMENT '본인인증일시',
  `email` VARCHAR(64) NULL COMMENT '이메일',
  `state_code` VARCHAR(64) NULL COMMENT '활성화 상태',
	`query_code` VARCHAR(10) NULL COMMENT '쿼리 코드',
	`query_date` TIMESTAMP NULL COMMENT '쿼리 실행 일시',
	`query_token_id` VARCHAR(128) NULL COMMENT '쿼리 실행 로그인 id' ,  
  `insert_date_time` TIMESTAMP NULL DEFAULT current_timestamp() COMMENT '[직원]등록일시',
  `update_pk` BIGINT(20) NULL COMMENT '[직원]수정자 fk',
  `update_date_time` TIMESTAMP NULL COMMENT '[직원]수정일시',
  `insert_pk` BIGINT(20) NULL COMMENT '[직원]등록자 fk',
	PRIMARY KEY (`sequence_log`) USING BTREE,
	INDEX `index_of_sequence` (`sequence`) USING BTREE,
	INDEX `index_of_id` (`id`) USING BTREE,
	INDEX `index_of_uuid` (`uuid`) USING BTREE,  
   INDEX `index_of_mobile` (`mobile`),
   INDEX `index_of_email` (`email`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT='회원로그';






2.3 데이터 보존 정책
-- 삭제된 데이터 보존 기간: 30일
-- 비활성 앱 데이터 보존: 1년
-- 로그 데이터 보존: 90일

================================================================================

3. 2차 개발 API 엔드포인트 설계

3.1 사용자 인증 API (2차 개발 핵심)

POST /api/v1/auth/register
# 사용자 계정 생성 (이메일 기반 회원가입)
Request:
{
  "email": "user@example.com",
  "password": "securePassword123",
  "display_name": "사용자명",
  "app_id": "litten_550e8400...",  // 1차에서 사용하던 앱 ID (마이그레이션용)
  "device_info": {
    "platform": "android",
    "version": "2.0.0",
    "locale": "ko",
    "country_code": "KR"
  }
}

Response:
{
  "success": true,
  "data": {
    "user_id": "550e8400-e29b-41d4-a716-446655440001",
    "email": "user@example.com",
    "display_name": "사용자명",
    "access_token": "eyJhbGciOiJIUzI1NiIs...",
    "refresh_token": "dGhpc2lzYXJlZnJlc2h0b2tlbg...",
    "subscription_type": "free",
    "language_code": "ko",
    "theme_preference": "classic_blue",
    "migration_status": "pending"  // 1차 데이터 마이그레이션 상태
  }
}


================================================================================

4. 서비스 레이어 설계

4.1 AuthService (인증 서비스)

앱 등록, API 키 검증, 구독 상태 관리를 담당합니다.

주요 기능:
- 앱 고유 ID 생성 (litten_{uuid}_{timestamp} 형식)
- API 키 생성 및 암호화 저장
- API 키 유효성 검증
- 구독 타입 변경 (free → premium)

4.2 NoteService (노트 관리 서비스)

노트(리튼) CRUD 및 사용량 통계를 관리합니다.

주요 기능:
- 노트 목록 조회 (페이지네이션)
- 노트 생성/수정/삭제 (소프트 삭제)
- 파일 수 집계 (listening, writing - 텍스트/필기/주석 통합)
- 사용량 통계 수집 (분석 목적)

4.3 FileService (파일 관리 서비스)

파일 업로드/다운로드 및 S3 저장소를 관리합니다.

주요 기능:
- S3 파일 업로드/다운로드
- 파일 메타데이터 추출 및 저장 (페이지 수, 해상도 등)
- 개별 파일 크기 확인 (최대 10MB)
- Presigned URL 생성 (보안 다운로드)
- 썸네일 생성 (이미지 파일용)

4.4 ConversionService (파일 변환 서비스)

문서 파일을 이미지로 변환하여 주석 기능을 지원합니다.

주요 기능:
- PDF → PNG 변환
- 비동기 변환 작업 큐 관리
- 변환 진행 상태 추적
- 변환된 파일의 페이지별 관리
- 변환 품질 최적화

4.5 AnnotationService (주석 관리 서비스)

파일에 대한 주석(하이라이트, 텍스트, 드로잉) 기능을 제공합니다.

주요 기능:
- 주석 CRUD (생성, 조회, 수정, 삭제)
- 주석 타입별 처리 (하이라이트, 텍스트, 드로잉, 도형, 스티커)
- 페이지별 주석 관리
- 주석 데이터 검증 (위치, 스타일, 드로잉 경로)
- 주석 성능 최적화

4.6 SyncService (동기화 서비스)

클라이언트-서버 간 델타 동기화를 처리합니다.

주요 기능:
- 델타 동기화 (변경사항만 전송)
- 충돌 해결 (서버 우선 정책)
- 동기화 상태 추적
- 오프라인 변경사항 처리
- 주석 데이터 실시간 동기화

================================================================================

5. 보안 설계

5.1 API 키 기반 인증
- sk_live_ 접두사를 가진 64자리 랜덤 키
- AES-256-CBC 암호화로 데이터베이스 저장
- Bearer 토큰 방식으로 헤더 전송

5.2 데이터 암호화
- 민감한 데이터: AES-256-GCM 암호화
- 파일 저장: S3 서버 사이드 암호화
- 통신: HTTPS 강제 적용

5.3 접근 제어
- 앱별 데이터 완전 격리
- Rate Limiting (15분간 1000회 제한)
- 파일 접근 권한 검증
- CORS 정책 적용

================================================================================

6. 파일 저장 구조

6.1 S3 버킷 구조

litten-files-production/
├── apps/
│   └── {app_id}/
│       └── notes/
│           └── {note_id}/
│               ├── recordings/
│               │   ├── recording_20241201_143027.m4a
│               │   └── recording_20241201_143028.wav
│               ├── writings/
│               │   ├── texts/
│               │   │   ├── text_20241201_143027.txt
│               │   │   └── note_20241201_143028.md
│               │   ├── handwritings/
│               │   │   ├── sketch_20241201_143027.png
│               │   │   └── drawing_20241201_143028.svg
│               │   ├── annotations/
│               │   │   ├── annotated_doc_20241201_143027.jpg
│               │   │   └── highlighted_pdf_20241201_143028.jpg
│               │   └── converted/
│               │       ├── original_document.pdf
│               │       ├── page_01.jpg
│               │       ├── page_02.jpg
│               │       └── thumbnails/
│               │           ├── page_01_thumb.jpg
│               │           └── page_02_thumb.jpg

6.2 CDN 및 캐싱
- CloudFront 글로벌 CDN
- 1년 캐싱 정책
- Gzip 압축 활성화
- 보안 헤더 추가

================================================================================

7. 성능 최적화

7.1 데이터베이스 최적화
- 연결 풀 (최대 20개 연결)
- 적절한 인덱스 설계
- 쿼리 최적화 (JOIN 최소화)
- 페이지네이션 적용

7.2 캐싱 전략
- Redis 캐싱
- 앱 정보: 1시간 캐싱
- 노트 목록: 5분 캐싱
- 사용량 정보: 1분 캐싱

================================================================================

8. 배포 및 인프라

8.1 컨테이너화
- Docker 기반 컨테이너
- 멀티 스테이지 빌드

8.2 AWS 인프라
- ECS Fargate (컨테이너 오케스트레이션)
- Application Load Balancer
- RDS MariaDB (Multi-AZ)
- ElastiCache Redis
- CloudWatch 모니터링

8.3 CI/CD 파이프라인
- GitHub Actions
- ECR 이미지 저장소
- 자동 배포 및 롤백

================================================================================

9. 모니터링 및 로깅

9.1 애플리케이션 모니터링
- API 응답 시간 추적
- 에러율 모니터링
- 사용량 통계 수집

9.2 인프라 모니터링
- CPU/메모리 사용률
- 데이터베이스 성능
- 네트워크 트래픽

9.3 로깅 시스템
- 구조화된 JSON 로그
- 중앙 집중식 로그 수집
- 90일 로그 보존

================================================================================

10. 확장성 고려사항

10.1 수평 확장
- 무상태 API 서버
- 로드 밸런서 기반 분산
- 데이터베이스 읽기 복제본

10.2 글로벌 확장
- 다중 리전 배포
- 지역별 CDN 엣지 로케이션
- 지연 시간 최적화

================================================================================

11. 2차 개발 설계 업데이트 내역 (2025-08-06)

11.1 2차 개발 주요 변경사항
- **사용자 인증 시스템**: 앱 ID 기반에서 이메일 기반 로그인으로 전환
- **클라우드 동기화**: 로컬 저장에서 서버 기반 동기화 시스템으로 확장
- **구독 결제 시스템**: 스탠다드 플랜 결제 및 광고 제거 기능 추가
- **데이터 마이그레이션**: 1차 로컬 데이터를 서버로 마이그레이션하는 시스템
- **다중 디바이스 지원**: 한 계정으로 여러 디바이스에서 동기화
- **서버 사이드 스토리지**: AWS S3 기반 파일 저장 및 관리
- **백업 및 복원**: 클라우드 기반 데이터 백업 시스템

11.2 2차 개발 새로운 API 엔드포인트
- POST /api/v1/auth/register - 이메일 기반 회원가입
- POST /api/v1/auth/login - 로그인 및 토큰 발급
- POST /api/v1/auth/refresh - 토큰 갱신
- POST /api/v1/sync/upload - 로컬 데이터 서버 업로드
- GET /api/v1/sync/download - 서버 데이터 다운로드
- POST /api/v1/subscription/upgrade - 스탠다드 플랜 구독
- GET /api/v1/subscription/status - 구독 상태 조회
- POST /api/v1/migration/start - 1차 데이터 마이그레이션 시작

11.3 2차 개발 데이터베이스 스키마 변경사항
- users 테이블 신규 생성 (이메일 기반 사용자 관리)
- subscriptions 테이블 신규 생성 (결제 및 구독 관리)
- 모든 기존 테이블의 app_id를 user_id로 변경
- sync_status, last_synced 필드 추가 (동기화 상태 관리)
- file_url, local_path 필드 추가 (클라우드 저장소 연동)

11.4 2차 개발 서비스 레이어 확장
- AuthService: JWT 토큰 기반 인증 시스템
- SyncService: 클라우드 동기화 전담 서비스
- SubscriptionService: 구독 결제 관리 서비스
- MigrationService: 1차 데이터 마이그레이션 서비스
- 기존 서비스들의 클라우드 저장소 연동

================================================================================

이상으로 리튼(litten) 크로스플랫폼 노트 앱의 2차 개발 백엔드 설계를 완료했습니다.
이 설계서는 1차 무료/유료 버전의 로컬 저장 시스템을 클라우드 기반 동기화 시스템으로 
확장하여 프리미엄 구독 서비스를 제공하기 위한 모든 핵심 백엔드 기능을 포괄하고 있습니다.

**1차 개발에서는 이 백엔드 시스템 없이 로컬 저장만으로 앱을 개발하고,**
**2차 개발 단계에서 이 설계를 바탕으로 서버 시스템을 구축합니다.**
================================================================================

12. 로컬 파일 서버 저장 전략 분석 (2025-10-11 추가)

================================================================================

12.1 동기화 방식 비교: 수동 저장/받기 vs 자동 동기화

┌─────────────────────────────────────────────────────────────────────────┐
│ 방식 1: 수동 저장/받기 (Manual Save/Load)                               │
└─────────────────────────────────────────────────────────────────────────┘

장점:
✅ 단순한 구조
   - 구현이 간단하고 명확함
   - 사용자가 저장 시점을 직접 제어
   - 서버 부담이 적음 (필요할 때만 통신)

✅ 낮은 리소스 사용
   - 네트워크 트래픽 최소화
   - 배터리 소모 적음 (모바일에서 중요)
   - 서버 API 호출 횟수 절약

✅ 명확한 버전 관리
   - 사용자가 언제 저장했는지 명확히 인지
   - 실수로 덮어쓰기 방지 가능
   - 서버 저장 전까지 로컬 데이터 유지

✅ 오프라인 작업 용이
   - 네트워크 없이도 자유롭게 작업
   - 저장 실패해도 데이터 손실 없음
   - 나중에 네트워크 연결 시 수동 업로드

단점:
❌ 사용자 부담
   - 저장 버튼을 누르지 않으면 데이터 손실 위험
   - 여러 기기 사용 시 수동 동기화 필요
   - 최신 버전 관리가 사용자 책임

❌ 충돌 가능성
   - 여러 기기에서 작업 시 버전 충돌
   - 마지막 저장이 이전 작업 덮어쓸 수 있음
   - 수동 병합 필요

❌ 데이터 유실 위험
   - 저장 잊으면 작업 내용 손실
   - 앱 강제 종료 시 미저장 데이터 소실
   - 기기 분실/고장 시 백업 없으면 복구 불가

┌─────────────────────────────────────────────────────────────────────────┐
│ 방식 2: 자동 동기화 (Auto Sync)                                         │
└─────────────────────────────────────────────────────────────────────────┘

장점:
✅ 데이터 안전성
   - 자동으로 서버에 백업
   - 작업 중 자동 저장으로 손실 방지
   - 실시간 또는 주기적 동기화

✅ 멀티 디바이스 편의성
   - 여러 기기에서 자동으로 최신 버전 유지
   - 기기 간 전환이 매끄러움
   - 수동 조작 불필요

✅ 사용자 경험 향상
   - 저장 걱정 없이 작업에 집중
   - "저장하셨나요?" 걱정 불필요
   - 자연스러운 워크플로우

✅ 충돌 해결 자동화
   - 서버에서 버전 관리 및 병합
   - 충돌 시 자동 해결 또는 알림
   - 변경 이력 추적 가능

단점:
❌ 복잡한 구현
   - 동기화 로직 구현 복잡
   - 충돌 해결 알고리즘 필요
   - 네트워크 오류 처리 까다로움

❌ 높은 리소스 사용
   - 지속적인 네트워크 연결 필요
   - 배터리 소모 증가 (모바일)
   - 서버 부하 증가 (많은 API 호출)

❌ 의도치 않은 덮어쓰기
   - 실수로 삭제/수정해도 즉시 동기화
   - 이전 버전 복구 시스템 필요
   - 사용자가 제어권 상실감 느낄 수 있음

❌ 네트워크 의존성
   - 오프라인 시 동기화 지연
   - 네트워크 불안정 시 충돌 가능
   - 데이터 요금 증가 (모바일 데이터)

================================================================================

12.2 Litten 앱 최종 선택: 하이브리드 전략

무료/스탠다드 버전:
- 수동 저장 (로컬 전용)
- 파일 내보내기/가져오기 (백업 목적)

프리미엄 버전:
- 지능형 자동 동기화
  옵션 1: 수동 동기화 (버튼 클릭)
  옵션 2: 앱 종료/백그라운드 시 자동 저장
  옵션 3: 실시간 자동 동기화 (편집 후 5초)
- 충돌 해결: "서버 버전 유지 / 내 버전 유지 / 병합" 선택
- WiFi 우선, 모바일 데이터는 설정 가능

================================================================================

12.3 비용 분석: S3 vs 자체 디스크

┌─────────────────────────────────────────────────────────────────────────┐
│ AWS S3 비용 (2025년 기준)                                               │
└─────────────────────────────────────────────────────────────────────────┘

S3 Standard:
- 저장 비용: $0.023/GB/월 (약 25원/GB/월)
- 전송 비용: $0.09/GB (아웃바운드)
- 요청 비용: PUT $0.005/1,000건, GET $0.0004/1,000건

예시 (100GB 저장 + 월 1TB 다운로드):
- 저장: 100GB × $0.023 = $2.3/월
- 전송: 1,000GB × $0.09 = $90/월
- 총: $92.3/월 (약 12만원)

S3 Intelligent-Tiering:
- 저장 비용: $0.023~$0.0125/GB/월 (자동 계층화)
- 자주 안 쓰는 파일 자동으로 저렴한 계층 이동

┌─────────────────────────────────────────────────────────────────────────┐
│ 자체 서버 디스크 비용                                                    │
└─────────────────────────────────────────────────────────────────────────┘

클라우드 서버 (AWS EC2 EBS):
- EBS GP3 (SSD): $0.08/GB/월 (약 106원/GB/월)
- EBS Cold HDD: $0.015/GB/월 (약 20원/GB/월)
- 전송: 같은 리전 내 무료

예시 (100GB 저장):
- GP3: 100GB × $0.08 = $8/월 (약 1만원)
- 전송: 무료
- 총: $8/월

전용 서버 (물리 서버):
- HDD 1TB: 약 5만원 (초기 구매)
  3년 감가상각: 약 1,400원/월
  전기료: 약 1,000원/월
  총: 약 2,400원/월

- SSD 1TB: 약 10만원 (초기 구매)
  3년 감가상각: 약 2,800원/월
  전기료: 약 800원/월
  총: 약 3,600원/월

┌─────────────────────────────────────────────────────────────────────────┐
│ 비용 비교표 (100GB 저장 기준)                                           │
└─────────────────────────────────────────────────────────────────────────┘

| 저장 방식           | 저장 비용    | 1TB 다운로드 | 월 총 비용      | 비고          |
|---------------------|-------------|--------------|-----------------|---------------|
| S3 Standard         | $2.3        | $90          | $92.3 (12만원)  | 트래픽 많으면 비쌈 |
| S3 Intelligent      | $2.3~1.25   | $90          | $92~91          | 오래된 파일 저렴 |
| EBS GP3 (SSD)       | $8          | 무료         | $8 (1만원)      | 같은 리전 무료 |
| EBS Cold HDD        | $1.5        | 무료         | $1.5 (2천원)    | 느림          |
| 전용 서버 HDD       | 2,400원     | 무료         | 2,400원         | 초기 투자     |
| 전용 서버 SSD       | 3,600원     | 무료         | 3,600원         | 초기 투자     |

결론:
- S3가 저렴한 경우: 저장량 적고 읽기 많음 (100GB 미만, 예측 불가)
- 자체 디스크가 저렴한 경우: 저장량 많고 읽기 적음 (수백GB~TB, 예측 가능)

Litten 앱 권장:
- 초기 단계 (사용자 1,000명 미만): S3 Standard
- 성장 단계 (1만명): S3 Intelligent-Tiering + CloudFront CDN
- 대규모 (10만명 이상): 하이브리드 (S3 + 자체 스토리지)

비용 절감 팁:
1. S3 Lifecycle 정책 설정
   - 30일 → S3 Standard-IA ($0.0125/GB)
   - 90일 → S3 Glacier Instant ($0.004/GB)
   - 1년 → S3 Glacier Deep Archive ($0.00099/GB)

2. CloudFront CDN 사용
   - CDN 트래픽: $0.085/GB (S3 직접보다 저렴)
   - 캐싱으로 S3 요청 횟수 감소

3. 압축 저장
   - 오디오: MP3/AAC (90% 절감)
   - 이미지: WebP/JPEG (70% 절감)
   - 텍스트: gzip (80% 절감)

================================================================================

12.4 최종 구독 모델 정리

┌─────────────────────────────────────────────────────────────────────────┐
│ 무료 버전 (Free)                                                        │
└─────────────────────────────────────────────────────────────────────────┘
저장: 로컬만 (서버 저장 없음)
제한: 리튼 5개, 녹음 10개, 텍스트 5개, 필기 5개
광고: 표시
로그인: 불가
서버 저장: 없음
멀티 디바이스: 불가
백업: 수동 (파일 내보내기/가져오기)

┌─────────────────────────────────────────────────────────────────────────┐
│ 스탠다드 버전 (Standard)                                                │
└─────────────────────────────────────────────────────────────────────────┘
저장: 로컬만 (서버 저장 없음)
제한: 무제한
광고: 제거
로그인: 불가
서버 저장: 없음
멀티 디바이스: 불가
백업: 수동 (파일 내보내기/가져오기)

┌─────────────────────────────────────────────────────────────────────────┐
│ 프리미엄 버전 (Premium) ⭐                                              │
└─────────────────────────────────────────────────────────────────────────┘
저장: 로컬 + 서버 (AWS S3)
제한: 무제한
광고: 제거
로그인: 필수 (이메일 기반)
서버 저장: AWS S3 (메타는 MariaDB)
멀티 디바이스: 지원 (자동 동기화)
백업: 자동 (서버 백업)
동기화: 지능형 자동 동기화 (옵션 선택 가능)

구독료 예상:
- 월 $4.99 (약 6,500원)
- 연 $49.99 (약 65,000원, 월 환산 17% 할인)

================================================================================

12.5 프리미엄 전용 데이터베이스 테이블 설계

주요 원칙:
- 무료/스탠다드 사용자는 note_member 테이블에 계정 없음 (로컬 전용)
- 프리미엄 사용자만 회원가입 후 서버 테이블 사용
- 모든 파일은 S3 저장, DB에는 메타데이터만
- 버전 관리 지원 (충돌 해결용)
- 논리 삭제 (soft delete)

┌─────────────────────────────────────────────────────────────────────────┐
│ 12.5.1 note_member 테이블 (구독 정보 추가)                             │
└─────────────────────────────────────────────────────────────────────────┘

기존 테이블에 구독 플랜 정보 추가:

ALTER TABLE `note_member` 
ADD COLUMN `subscription_plan` VARCHAR(20) NOT NULL DEFAULT 'free' 
  COMMENT '구독 플랜 (free, standard, premium)',
ADD COLUMN `subscription_status` VARCHAR(20) NULL 
  COMMENT '구독 상태 (active, expired, cancelled)',
ADD COLUMN `subscription_start_date` TIMESTAMP NULL 
  COMMENT '구독 시작일',
ADD COLUMN `subscription_end_date` TIMESTAMP NULL 
  COMMENT '구독 만료일',
ADD COLUMN `last_payment_date` TIMESTAMP NULL 
  COMMENT '마지막 결제일',
ADD INDEX `index_subscription_plan` (`subscription_plan`);

┌─────────────────────────────────────────────────────────────────────────┐
│ 12.5.2 note_litten - 리튼 공간 테이블                                  │
└─────────────────────────────────────────────────────────────────────────┘

DROP TABLE IF EXISTS `note_litten`;
CREATE TABLE `note_litten` (
  `sequence` BIGINT(20) NOT NULL AUTO_INCREMENT COMMENT '리튼 PK',
  `uuid` VARCHAR(64) NOT NULL COMMENT '회원 UUID (FK: note_member.uuid)',
  `litten_uuid` VARCHAR(64) NOT NULL COMMENT '리튼 고유 UUID (클라이언트 생성)',
  `title` VARCHAR(255) NULL COMMENT '리튼 제목',
  `description` TEXT NULL COMMENT '리튼 설명',
  `color` VARCHAR(20) NULL COMMENT '리튼 색상 코드',
  `icon` VARCHAR(50) NULL COMMENT '리튼 아이콘',
  `sort_order` INT NULL DEFAULT 0 COMMENT '정렬 순서',
  `is_deleted` TINYINT(1) NOT NULL DEFAULT 0 COMMENT '삭제 여부',
  `deleted_date_time` TIMESTAMP NULL COMMENT '삭제 일시',
  `created_at_device` TIMESTAMP NULL COMMENT '클라이언트 생성 일시',
  `updated_at_device` TIMESTAMP NULL COMMENT '클라이언트 수정 일시',
  `synced_at` TIMESTAMP NULL COMMENT '서버 동기화 일시',
  `insert_date_time` TIMESTAMP NULL DEFAULT current_timestamp() 
    COMMENT '서버 등록 일시',
  `update_date_time` TIMESTAMP NULL ON UPDATE current_timestamp() 
    COMMENT '서버 수정 일시',
  `version` INT NOT NULL DEFAULT 1 COMMENT '버전 번호',
  PRIMARY KEY (`sequence`) USING BTREE,
  UNIQUE INDEX `unique_litten_uuid` (`litten_uuid`) USING BTREE,
  INDEX `index_member_uuid` (`uuid`) USING BTREE,
  INDEX `index_is_deleted` (`is_deleted`) USING BTREE,
  INDEX `index_updated_at_device` (`updated_at_device`) USING BTREE,
  CONSTRAINT `fk_litten_member` FOREIGN KEY (`uuid`) 
    REFERENCES `note_member` (`uuid`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci 
  COMMENT='리튼 공간';

주요 필드:
- litten_uuid: 클라이언트에서 생성한 UUID (오프라인 동기화용)
- version: 충돌 해결용 버전 번호
- created_at_device: 기기에서 생성한 시간 (타임존 보정용)
- synced_at: 마지막 동기화 시간

┌─────────────────────────────────────────────────────────────────────────┐
│ 12.5.3 note_audio_file - 녹음 파일 테이블                              │
└─────────────────────────────────────────────────────────────────────────┘

DROP TABLE IF EXISTS `note_audio_file`;
CREATE TABLE `note_audio_file` (
  `sequence` BIGINT(20) NOT NULL AUTO_INCREMENT COMMENT '녹음 파일 PK',
  `uuid` VARCHAR(64) NOT NULL COMMENT '회원 UUID (FK: note_member.uuid)',
  `litten_uuid` VARCHAR(64) NOT NULL 
    COMMENT '리튼 UUID (FK: note_litten.litten_uuid)',
  `audio_uuid` VARCHAR(64) NOT NULL COMMENT '녹음 파일 고유 UUID',
  `title` VARCHAR(255) NULL COMMENT '녹음 제목',
  `file_name` VARCHAR(512) NULL COMMENT '원본 파일명',
  `file_extension` VARCHAR(10) NULL COMMENT '파일 확장자 (m4a, wav 등)',
  `file_size` BIGINT(20) NULL COMMENT '파일 크기 (bytes)',
  `duration_seconds` INT NULL COMMENT '녹음 길이 (초)',
  `s3_bucket` VARCHAR(128) NULL COMMENT 'S3 버킷명',
  `s3_key` VARCHAR(512) NULL COMMENT 'S3 객체 키',
  `s3_url` VARCHAR(1024) NULL COMMENT 'S3 URL',
  `mime_type` VARCHAR(100) NULL COMMENT 'MIME 타입',
  `is_uploaded` TINYINT(1) NOT NULL DEFAULT 0 COMMENT '업로드 완료 여부',
  `upload_date_time` TIMESTAMP NULL COMMENT '업로드 완료 일시',
  `is_deleted` TINYINT(1) NOT NULL DEFAULT 0 COMMENT '삭제 여부',
  `deleted_date_time` TIMESTAMP NULL COMMENT '삭제 일시',
  `created_at_device` TIMESTAMP NULL COMMENT '클라이언트 생성 일시',
  `updated_at_device` TIMESTAMP NULL COMMENT '클라이언트 수정 일시',
  `synced_at` TIMESTAMP NULL COMMENT '서버 동기화 일시',
  `insert_date_time` TIMESTAMP NULL DEFAULT current_timestamp() 
    COMMENT '서버 등록 일시',
  `update_date_time` TIMESTAMP NULL ON UPDATE current_timestamp() 
    COMMENT '서버 수정 일시',
  `version` INT NOT NULL DEFAULT 1 COMMENT '버전 번호',
  PRIMARY KEY (`sequence`) USING BTREE,
  UNIQUE INDEX `unique_audio_uuid` (`audio_uuid`) USING BTREE,
  INDEX `index_member_uuid` (`uuid`) USING BTREE,
  INDEX `index_litten_uuid` (`litten_uuid`) USING BTREE,
  INDEX `index_is_deleted` (`is_deleted`) USING BTREE,
  INDEX `index_updated_at_device` (`updated_at_device`) USING BTREE,
  CONSTRAINT `fk_audio_member` FOREIGN KEY (`uuid`) 
    REFERENCES `note_member` (`uuid`) ON DELETE CASCADE,
  CONSTRAINT `fk_audio_litten` FOREIGN KEY (`litten_uuid`) 
    REFERENCES `note_litten` (`litten_uuid`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci 
  COMMENT='녹음 파일';

주요 필드:
- audio_uuid: 클라이언트 생성 UUID
- duration_seconds: 재생 시간 표시용
- s3_*: AWS S3 저장 정보
- is_uploaded: 업로드 대기 중인 파일 필터링용

┌─────────────────────────────────────────────────────────────────────────┐
│ 12.5.4 note_handwriting_file - 필기 파일 테이블                        │
└─────────────────────────────────────────────────────────────────────────┘

DROP TABLE IF EXISTS `note_handwriting_file`;
CREATE TABLE `note_handwriting_file` (
  `sequence` BIGINT(20) NOT NULL AUTO_INCREMENT COMMENT '필기 파일 PK',
  `uuid` VARCHAR(64) NOT NULL COMMENT '회원 UUID (FK: note_member.uuid)',
  `litten_uuid` VARCHAR(64) NOT NULL 
    COMMENT '리튼 UUID (FK: note_litten.litten_uuid)',
  `handwriting_uuid` VARCHAR(64) NOT NULL COMMENT '필기 파일 고유 UUID',
  `title` VARCHAR(255) NULL COMMENT '필기 제목',
  `file_name` VARCHAR(512) NULL COMMENT '원본 파일명',
  `file_extension` VARCHAR(10) NULL COMMENT '파일 확장자 (png, pdf 등)',
  `file_size` BIGINT(20) NULL COMMENT '파일 크기 (bytes)',
  `page_count` INT NULL DEFAULT 1 COMMENT '페이지 수 (PDF 변환된 경우)',
  `s3_bucket` VARCHAR(128) NULL COMMENT 'S3 버킷명',
  `s3_key` VARCHAR(512) NULL COMMENT 'S3 객체 키',
  `s3_url` VARCHAR(1024) NULL COMMENT 'S3 URL',
  `thumbnail_s3_key` VARCHAR(512) NULL COMMENT '썸네일 S3 키',
  `thumbnail_s3_url` VARCHAR(1024) NULL COMMENT '썸네일 S3 URL',
  `mime_type` VARCHAR(100) NULL COMMENT 'MIME 타입',
  `is_uploaded` TINYINT(1) NOT NULL DEFAULT 0 COMMENT '업로드 완료 여부',
  `upload_date_time` TIMESTAMP NULL COMMENT '업로드 완료 일시',
  `is_deleted` TINYINT(1) NOT NULL DEFAULT 0 COMMENT '삭제 여부',
  `deleted_date_time` TIMESTAMP NULL COMMENT '삭제 일시',
  `created_at_device` TIMESTAMP NULL COMMENT '클라이언트 생성 일시',
  `updated_at_device` TIMESTAMP NULL COMMENT '클라이언트 수정 일시',
  `synced_at` TIMESTAMP NULL COMMENT '서버 동기화 일시',
  `insert_date_time` TIMESTAMP NULL DEFAULT current_timestamp() 
    COMMENT '서버 등록 일시',
  `update_date_time` TIMESTAMP NULL ON UPDATE current_timestamp() 
    COMMENT '서버 수정 일시',
  `version` INT NOT NULL DEFAULT 1 COMMENT '버전 번호',
  PRIMARY KEY (`sequence`) USING BTREE,
  UNIQUE INDEX `unique_handwriting_uuid` (`handwriting_uuid`) USING BTREE,
  INDEX `index_member_uuid` (`uuid`) USING BTREE,
  INDEX `index_litten_uuid` (`litten_uuid`) USING BTREE,
  INDEX `index_is_deleted` (`is_deleted`) USING BTREE,
  INDEX `index_updated_at_device` (`updated_at_device`) USING BTREE,
  CONSTRAINT `fk_handwriting_member` FOREIGN KEY (`uuid`) 
    REFERENCES `note_member` (`uuid`) ON DELETE CASCADE,
  CONSTRAINT `fk_handwriting_litten` FOREIGN KEY (`litten_uuid`) 
    REFERENCES `note_litten` (`litten_uuid`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci 
  COMMENT='필기 파일';

주요 필드:
- page_count: PDF를 PNG로 변환한 경우 페이지 수
- thumbnail_*: 리스트 표시용 썸네일

┌─────────────────────────────────────────────────────────────────────────┐
│ 12.5.5 note_text_file - 텍스트 파일 테이블                             │
└─────────────────────────────────────────────────────────────────────────┘

DROP TABLE IF EXISTS `note_text_file`;
CREATE TABLE `note_text_file` (
  `sequence` BIGINT(20) NOT NULL AUTO_INCREMENT COMMENT '텍스트 파일 PK',
  `uuid` VARCHAR(64) NOT NULL COMMENT '회원 UUID (FK: note_member.uuid)',
  `litten_uuid` VARCHAR(64) NOT NULL 
    COMMENT '리튼 UUID (FK: note_litten.litten_uuid)',
  `text_uuid` VARCHAR(64) NOT NULL COMMENT '텍스트 파일 고유 UUID',
  `title` VARCHAR(255) NULL COMMENT '텍스트 제목',
  `content_html` LONGTEXT NULL 
    COMMENT 'HTML 형식 내용 (html-editor-enhanced)',
  `content_plain` TEXT NULL COMMENT '플레인 텍스트 내용 (검색용)',
  `content_length` INT NULL COMMENT '텍스트 길이 (문자 수)',
  `s3_bucket` VARCHAR(128) NULL COMMENT 'S3 버킷명 (대용량 텍스트 경우)',
  `s3_key` VARCHAR(512) NULL COMMENT 'S3 객체 키',
  `s3_url` VARCHAR(1024) NULL COMMENT 'S3 URL',
  `is_s3_stored` TINYINT(1) NOT NULL DEFAULT 0 
    COMMENT 'S3 저장 여부 (대용량)',
  `is_uploaded` TINYINT(1) NOT NULL DEFAULT 0 COMMENT '업로드 완료 여부',
  `upload_date_time` TIMESTAMP NULL COMMENT '업로드 완료 일시',
  `is_deleted` TINYINT(1) NOT NULL DEFAULT 0 COMMENT '삭제 여부',
  `deleted_date_time` TIMESTAMP NULL COMMENT '삭제 일시',
  `created_at_device` TIMESTAMP NULL COMMENT '클라이언트 생성 일시',
  `updated_at_device` TIMESTAMP NULL COMMENT '클라이언트 수정 일시',
  `synced_at` TIMESTAMP NULL COMMENT '서버 동기화 일시',
  `insert_date_time` TIMESTAMP NULL DEFAULT current_timestamp() 
    COMMENT '서버 등록 일시',
  `update_date_time` TIMESTAMP NULL ON UPDATE current_timestamp() 
    COMMENT '서버 수정 일시',
  `version` INT NOT NULL DEFAULT 1 COMMENT '버전 번호',
  PRIMARY KEY (`sequence`) USING BTREE,
  UNIQUE INDEX `unique_text_uuid` (`text_uuid`) USING BTREE,
  INDEX `index_member_uuid` (`uuid`) USING BTREE,
  INDEX `index_litten_uuid` (`litten_uuid`) USING BTREE,
  INDEX `index_is_deleted` (`is_deleted`) USING BTREE,
  INDEX `index_updated_at_device` (`updated_at_device`) USING BTREE,
  FULLTEXT INDEX `fulltext_content_plain` (`content_plain`),
  CONSTRAINT `fk_text_member` FOREIGN KEY (`uuid`) 
    REFERENCES `note_member` (`uuid`) ON DELETE CASCADE,
  CONSTRAINT `fk_text_litten` FOREIGN KEY (`litten_uuid`) 
    REFERENCES `note_litten` (`litten_uuid`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci 
  COMMENT='텍스트 파일';

주요 필드:
- content_html: html-editor-enhanced로 작성한 HTML 내용
- content_plain: 검색을 위한 플레인 텍스트 (FULLTEXT INDEX)
- is_s3_stored: 대용량 텍스트는 S3에 저장하고 DB에는 메타만

┌─────────────────────────────────────────────────────────────────────────┐
│ 12.5.6 note_member_settings - 사용자 설정 테이블                       │
└─────────────────────────────────────────────────────────────────────────┘

DROP TABLE IF EXISTS `note_member_settings`;
CREATE TABLE `note_member_settings` (
  `sequence` BIGINT(20) NOT NULL AUTO_INCREMENT COMMENT '설정 PK',
  `uuid` VARCHAR(64) NOT NULL COMMENT '회원 UUID (FK: note_member.uuid)',
  `settings_uuid` VARCHAR(64) NOT NULL COMMENT '설정 고유 UUID',
  `language` VARCHAR(10) NULL DEFAULT 'en' 
    COMMENT '언어 설정 (en, ko, zh 등)',
  `theme` VARCHAR(50) NULL DEFAULT 'Classic Blue' 
    COMMENT '테마 (Classic Blue, Dark Mode 등)',
  `font_size` VARCHAR(20) NULL DEFAULT 'medium' 
    COMMENT '폰트 크기 (small, medium, large)',
  `auto_sync_enabled` TINYINT(1) NOT NULL DEFAULT 1 
    COMMENT '자동 동기화 활성화',
  `sync_wifi_only` TINYINT(1) NOT NULL DEFAULT 1 
    COMMENT 'WiFi에서만 동기화',
  `sync_interval_minutes` INT NULL DEFAULT 5 
    COMMENT '동기화 간격 (분)',
  `notification_enabled` TINYINT(1) NOT NULL DEFAULT 1 
    COMMENT '알림 활성화',
  `backup_enabled` TINYINT(1) NOT NULL DEFAULT 1 
    COMMENT '자동 백업 활성화',
  `settings_json` JSON NULL COMMENT '기타 설정 (JSON 형식)',
  `created_at_device` TIMESTAMP NULL COMMENT '클라이언트 생성 일시',
  `updated_at_device` TIMESTAMP NULL COMMENT '클라이언트 수정 일시',
  `synced_at` TIMESTAMP NULL COMMENT '서버 동기화 일시',
  `insert_date_time` TIMESTAMP NULL DEFAULT current_timestamp() 
    COMMENT '서버 등록 일시',
  `update_date_time` TIMESTAMP NULL ON UPDATE current_timestamp() 
    COMMENT '서버 수정 일시',
  `version` INT NOT NULL DEFAULT 1 COMMENT '버전 번호',
  PRIMARY KEY (`sequence`) USING BTREE,
  UNIQUE INDEX `unique_uuid` (`uuid`) USING BTREE,
  UNIQUE INDEX `unique_settings_uuid` (`settings_uuid`) USING BTREE,
  INDEX `index_updated_at_device` (`updated_at_device`) USING BTREE,
  CONSTRAINT `fk_settings_member` FOREIGN KEY (`uuid`) 
    REFERENCES `note_member` (`uuid`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci 
  COMMENT='회원 설정';

주요 필드:
- language, theme: 앱 UI 설정
- auto_sync_*: 동기화 관련 설정
- settings_json: 확장 가능한 JSON 필드 (나중에 추가 설정용)

┌─────────────────────────────────────────────────────────────────────────┐
│ 12.5.7 note_subscription_history - 구독 이력 테이블                    │
└─────────────────────────────────────────────────────────────────────────┘

DROP TABLE IF EXISTS `note_subscription_history`;
CREATE TABLE `note_subscription_history` (
  `sequence` BIGINT(20) NOT NULL AUTO_INCREMENT COMMENT '구독 이력 PK',
  `uuid` VARCHAR(64) NOT NULL COMMENT '회원 UUID (FK: note_member.uuid)',
  `subscription_plan` VARCHAR(20) NOT NULL 
    COMMENT '구독 플랜 (standard, premium)',
  `payment_method` VARCHAR(50) NULL 
    COMMENT '결제 방법 (apple, google, card 등)',
  `payment_amount` DECIMAL(10,2) NULL COMMENT '결제 금액',
  `payment_currency` VARCHAR(10) NULL DEFAULT 'USD' COMMENT '통화',
  `transaction_id` VARCHAR(255) NULL COMMENT '결제 트랜잭션 ID',
  `receipt_data` TEXT NULL COMMENT '영수증 데이터',
  `subscription_start_date` TIMESTAMP NULL COMMENT '구독 시작일',
  `subscription_end_date` TIMESTAMP NULL COMMENT '구독 만료일',
  `status` VARCHAR(20) NULL 
    COMMENT '상태 (success, failed, refunded)',
  `insert_date_time` TIMESTAMP NULL DEFAULT current_timestamp() 
    COMMENT '등록 일시',
  PRIMARY KEY (`sequence`) USING BTREE,
  INDEX `index_member_uuid` (`uuid`) USING BTREE,
  INDEX `index_transaction_id` (`transaction_id`) USING BTREE,
  CONSTRAINT `fk_subscription_member` FOREIGN KEY (`uuid`) 
    REFERENCES `note_member` (`uuid`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci 
  COMMENT='구독 이력';

┌─────────────────────────────────────────────────────────────────────────┐
│ 12.5.8 note_sync_log - 동기화 로그 테이블                              │
└─────────────────────────────────────────────────────────────────────────┘

DROP TABLE IF EXISTS `note_sync_log`;
CREATE TABLE `note_sync_log` (
  `sequence` BIGINT(20) NOT NULL AUTO_INCREMENT COMMENT '동기화 로그 PK',
  `uuid` VARCHAR(64) NOT NULL COMMENT '회원 UUID (FK: note_member.uuid)',
  `device_id` VARCHAR(128) NULL COMMENT '기기 고유 ID',
  `device_type` VARCHAR(20) NULL COMMENT '기기 유형 (android, ios)',
  `device_os_version` VARCHAR(50) NULL COMMENT 'OS 버전',
  `app_version` VARCHAR(20) NULL COMMENT '앱 버전',
  `sync_type` VARCHAR(20) NULL 
    COMMENT '동기화 유형 (manual, auto, background)',
  `sync_direction` VARCHAR(10) NULL 
    COMMENT '동기화 방향 (upload, download, both)',
  `sync_status` VARCHAR(20) NULL 
    COMMENT '동기화 상태 (success, failed, partial)',
  `items_uploaded` INT NULL DEFAULT 0 COMMENT '업로드된 항목 수',
  `items_downloaded` INT NULL DEFAULT 0 COMMENT '다운로드된 항목 수',
  `items_conflicted` INT NULL DEFAULT 0 COMMENT '충돌 항목 수',
  `error_message` TEXT NULL COMMENT '에러 메시지',
  `sync_start_time` TIMESTAMP NULL COMMENT '동기화 시작 시간',
  `sync_end_time` TIMESTAMP NULL COMMENT '동기화 종료 시간',
  `duration_seconds` INT NULL COMMENT '동기화 소요 시간 (초)',
  `insert_date_time` TIMESTAMP NULL DEFAULT current_timestamp() 
    COMMENT '로그 등록 일시',
  PRIMARY KEY (`sequence`) USING BTREE,
  INDEX `index_member_uuid` (`uuid`) USING BTREE,
  INDEX `index_sync_start_time` (`sync_start_time`) USING BTREE,
  INDEX `index_sync_status` (`sync_status`) USING BTREE,
  CONSTRAINT `fk_sync_log_member` FOREIGN KEY (`uuid`) 
    REFERENCES `note_member` (`uuid`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci 
  COMMENT='동기화 로그';

용도:
- 동기화 실패 추적
- 성능 모니터링
- 디버깅 및 지원

================================================================================

12.6 ER 다이어그램 (관계도)

note_member (회원) - 프리미엄 전용
    |
    +-- (1:N) --> note_litten (리튼 공간)
    |                 |
    |                 +-- (1:N) --> note_audio_file (녹음 파일)
    |                 |
    |                 +-- (1:N) --> note_handwriting_file (필기 파일)
    |                 |
    |                 +-- (1:N) --> note_text_file (텍스트 파일)
    |
    +-- (1:1) --> note_member_settings (설정)
    |
    +-- (1:N) --> note_subscription_history (구독 이력)
    |
    +-- (1:N) --> note_sync_log (동기화 로그)

================================================================================

12.7 저장 용량 추정

무료 버전 (최대):
- 리튼: 5개 × 1KB = 5KB
- 녹음: 10개 × 5MB = 50MB
- 텍스트: 5개 × 100KB = 500KB
- 필기: 5개 × 2MB = 10MB
- 총 약 60MB / 사용자 (로컬 전용, 서버 비용 없음)

스탠다드 버전:
- 제한 없음, 평균 200MB / 사용자 추정 (로컬 전용, 서버 비용 없음)

프리미엄 버전:
- 평균 500MB ~ 1GB / 사용자 추정 (서버 저장)
- 사용자 10,000명 기준: 500명 (5%) = 약 100GB (S3 비용: $2.3/월)

================================================================================

12.8 프리미엄 비용 분석

시나리오: 전체 사용자 10,000명
- 무료: 7,000명 (70%) → 서버 비용 없음
- 스탠다드: 2,500명 (25%) → 서버 비용 없음
- 프리미엄: 500명 (5%) → 서버 사용

프리미엄 서버 비용:
- 저장량: 200MB × 500명 = 100GB
- S3 비용: 100GB × $0.023 = $2.3/월
- 트래픽: 약 $10~20/월
- 총 서버 비용: $12~22/월

프리미엄 수익:
- 500명 × $4.99/월 = $2,495/월
- 순익: $2,495 - $22 = $2,473/월 (약 320만원)

결론: 프리미엄만 서버 저장하는 전략이 비용 효율적

================================================================================

이상으로 로컬 파일 서버 저장 전략 분석 및 프리미엄 전용 데이터베이스 
테이블 설계를 완료했습니다.

핵심 요약:
- 무료/스탠다드: 로컬 저장만, 서버 저장 없음
- 프리미엄: 로컬 + 서버 저장 (AWS S3), 로그인 필수
- 비용 효율: 5% 프리미엄 전환 시 월 $2,473 순익
- 동기화: 지능형 자동 동기화 (옵션 선택 가능)

================================================================================
