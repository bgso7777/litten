리튼(litten) 크로스플랫폼 노트 앱과 웹 UI 설계서 (최종 업데이트)

================================================================================

1. 설계 기반 분석

1.1 기존 Flutter 프로젝트 분석 결과
기존 프로젝트에서 추출한 핵심 UI 패턴:
- 탭 기반 네비게이션: BottomNavigationBar 4개 탭 구조
- 카드 레이아웃: 기능별 Card 위젯으로 구분
- 리스트 뷰: ListView.builder를 통한 효율적인 스크롤
- 상태 기반 UI: StatefulWidget으로 실시간 상태 반영
- 반응형 디자인: 플랫폼별 조건부 렌더링

1.2 리튼 앱 적용 방향
기존 구조를 확장하여 리튼의 요구사항에 맞게 개선:
- 30개 언어 지원을 위한 국제화 UI
- 무료/스탠다드/프리미엄 차별화 UI
- 크로스플랫폼 최적화
- 접근성 강화

================================================================================

2. 전체 앱 구조 

2.1 메인 앱 구조 (MainApp)
MaterialApp
├── Theme Configuration (5가지 테마 시스템)
├── Localization (30개 언어)
├── Navigation Routes
└── MainTabScreen (메인 화면)

2.2 메인 탭 화면 (MainTabScreen) - 최종 구조
Scaffold
├── AdBanner (무료 사용자만, 최상단 고정, height: 50px)
│   ├── 광고 컨텐츠 영역 (로딩/성공/에러 상태 표시)
│   └── 업그레이드 버튼 ("광고 제거", "업그레이드")
├── AppBar (height: 64px)
│   ├── Leading: 리튼 로고 + 아이콘 조합
│   │   ├── 메인 로고: 🎧 (듣기 상징)
│   │   └── 서브 아이콘: 🎤(듣기) + ✏️(쓰기)
│   ├── Title: 조건부 렌더링
│   │   ├── 노트 선택됨: 노트 제목 (중앙 정렬)
│   │   └── 노트 없음: "리튼을 생성하거나 선택하세요"
│   └── Actions: 파일 수 배지들 (노트 선택 시)
│       ├── 듣기 배지: 🎤 + 숫자 (빨간색 계열)
│       └── 쓰기 배지: ✏️ + 숫자 (초록색 계열)
├── Body: 탭별 화면 위젯
│   ├── HomeScreen (홈 탭)
│   ├── RecorderScreen (듣기 탭)
│   ├── WritingScreen (쓰기 탭)
│   └── SettingsScreen (설정 탭)
└── BottomNavigationBar (4개 탭)
    ├── 홈 (🏠, Icons.home)
    ├── 듣기 (🎤, Icons.mic) 
    ├── 쓰기 (✏️, Icons.edit) - 텍스트 작성 및 필기 통합
    └── 설정 (⚙️, Icons.settings)

================================================================================

3. 화면별 상세 설계 

3.1 홈 화면 (HomeScreen) - 완성본

3.1.1 전체 레이아웃 구조
Column
├── AdBanner (무료 사용자만, height: 50)
├── 노트 목록 영역 (Expanded)
│   ├── 빈 상태: 중앙 안내 메시지
│   └── 리스트 상태: ListView.builder
│       └── 노트 아이템 (ListTile 스타일 카드)
└── FloatingActionButton: "리튼 생성" (하단 우측)

3.1.2 노트 아이템 UI 
Card
└── Padding(16px)
    └── Row
        ├── Leading: 📝 아이콘
        ├── Expanded: Column
        │   ├── Title Row
        │   │   ├── 노트 제목 (16px, 굵게)
        │   │   └── 파일 배지 Row
        │   │       ├── 듣기 배지: 🎤 + 숫자 (빨간 배경)
        │   │       └── 쓰기 배지: ✏️ + 숫자 (초록 배경)
        │   ├── Subtitle: 내용 미리보기 (30자 제한, 회색)
        │   └── Meta Row
        │       └── 날짜 (12/01 14:30, 작은 회색 글씨)
        └── Trailing: 삭제 버튼 🗑️ (빨간색)

3.1.3 빈 상태 UI (개선)
Center
└── Column
    ├── Icon(📝, size: 64, color: Colors.grey)
    ├── SizedBox(height: 16)
    ├── Text("리튼을 생성하거나 선택하세요", headline6)
    ├── SizedBox(height: 8)
    └── Text("하단의 '리튼 생성' 버튼을...", caption)

3.2 듣기 화면 (RecorderScreen) - 완성본

3.2.1 전체 레이아웃 구조
Column
├── AdBanner (무료 사용자만, height: 50)
├── 듣기 파일 목록 (Expanded)
│   └── ListView.builder
│       └── 듣기 파일 카드
└── 하단 듣기 컨트롤 패널 (고정)
    ├── 듣기 시작 버튼
    ├── 듣기 중지 버튼
    └── 듣기 상태 표시

3.2.2 듣기 파일 카드 UI 
Card
└── Padding(16px)
    └── Column
        ├── 파일 헤더 Row
        │   ├── 파일 정보
        │   │   ├── 🎤 아이콘
        │   │   ├── 파일명 (20241201_월_143027)
        │   │   └── 재생시간 배지 [2:30]
        │   └── 삭제 버튼 🗑️
        ├── 프로그레스 바 (재생 중일 때)
        │   ├── LinearProgressIndicator
        │   └── 시간 표시 Row (1:45 / 2:30)
        ├── 듣기 상태 표시 (조건부)
        │   └── 🔴 듣기 중... [현재시간]
        └── 컨트롤 버튼 Row
            ├── 배속 버튼 그룹
            │   ├── [1.0x] [1.2x] [1.5x] [2.0x]
            │   └── 선택된 배속은 파란 배경
            └── 재생/일시정지 버튼 (▶️/⏸️)

3.2.3 하단 듣기 컨트롤 UI 
Container (고정 높이, 상단 테두리)
└── Padding(16px)
    └── Row
        ├── 듣기 버튼 (빨간색, 🎤 + "듣기")
        ├── SizedBox(width: 8)
        ├── 중지 버튼 (회색, ⏹️ + "정지")
        └── 상태 표시 (조건부)
            └── Row: 🔴 + "듣기 중..." (빨간색)

3.3 쓰기 화면 (WritingScreen) - 완전 개선

3.3.1 전체 레이아웃 구조 
Column
├── AdBanner (무료 사용자만, height: 50)
├── 음성-쓰기 동기화 상태 표시 (AudioSyncIndicator)
├── 모드 선택 탭바 (텍스트 쓰기 / 필기)
├── 현재 모드에 따른 화면 표시
│   ├── 텍스트 쓰기 모드 → 3.3.2
│   └── 필기 모드 → 3.3.3
└── 저장 버튼

3.3.2 텍스트 쓰기 모드 (TextWritingMode) - 완성
Column
├── HTML 에디터 도구바
│   ├── 서식 버튼들: [B][I][U][S]
│   ├── 헤더 버튼들: [H1][H2][H3]
│   ├── 리스트 버튼들: [•][1.]
│   └── 기능 버튼들: [🔗][🎨][Aa][📋]
├── 텍스트 입력창 (Expanded)
│   ├── TextField (multiline, expands: true)
│   ├── 음성 동기화 마커 지원: 🎙️[00:10:23]
│   └── 자동저장 기능 (_onTextChanged)
└── 파일 목록 (접힌 상태, 120px)
    └── ListView: 저장된 텍스트 파일들

3.3.3 필기 모드 (HandwritingMode) - 신규 완성

3.3.3.1 전체 레이아웃 구조
Column
├── 파일 타입 아이콘 (절대 위치, 좌상단)
│   ├── IMAGE 아이콘: 🖼️ + "IMAGE" (빨간색)
│   └── DOC 아이콘: 📄 + "DOC" (파란색)
├── 캔버스 영역 (Expanded)
│   ├── 배경 이미지 (변환된 PDF 문서)
│   │   ├── 문서 헤더: "📄 회의자료.pdf - 페이지 1/3"
│   │   ├── 문서 내용: 실제 변환된 텍스트
│   │   └── 기존 주석들 표시
│   ├── 드로잉 캔버스 (투명 레이어)
│   └── 샘플 주석들
│       ├── 하이라이트 (노란 배경)
│       ├── 텍스트 노트 (🎙️ + "중요!" 말풍선)
│       └── 드로잉 (빨간 곡선과 원)
├── 필기 도구 패널
│   ├── 도구바 (8개 도구)
│   ├── 음성 마커 섹션
│   ├── 색상 팔레트 (8색)
│   └── 굵기 조절 슬라이더
└── 저장 버튼

3.3.3.2 필기 도구 패널 상세 UI
Container (흰 배경, 그림자, 둥근 모서리)
└── Padding(16px)
    └── Column
        ├── 도구바 Row (flex-wrap)
        │   ├── 펜: ✏️ (기본 필기)
        │   ├── 하이라이터: 🖍️ (투명 강조)
        │   ├── 지우개: 🧹 (부분 지우기)
        │   ├── 직선: 📏 (일직선)
        │   ├── 사각형: ⬜ (도형)
        │   ├── 원: ⭕ (도형)
        │   ├── 화살표: ➡️ (포인터)
        │   └── 텍스트: 📝 (텍스트 입력)
        ├── SizedBox(height: 16)
        ├── 음성 마커 섹션 (파란 배경)
        │   ├── 정보 표시: 🎙️ + "음성 마커" + [02:34]
        │   └── "마커 추가" 버튼 (파란 배경)
        ├── SizedBox(height: 16)
        ├── 색상 팔레트 Row (flex-wrap)
        │   ├── 검정(활성), 빨강, 파랑, 초록
        │   └── 노랑, 자주, 하늘, 회색
        ├── SizedBox(height: 16)
        └── 굵기 조절 Row
            ├── "굵기:" 레이블
            ├── Slider (1-10, 현재값: 3)
            └── "3px" 값 표시

3.3.4 공통 기능 (텍스트/필기 공용)
AudioSyncIndicator (이미 정의됨)
├── 🔄 아이콘 + "음성 동기화 활성"
├── 현재 재생 시간: "02:34" (우측 정렬)
└── 상태별 색상 변경 (파란색: 활성, 빨간색: 듣기중)

음성 동기화 마커 시스템:
├── 아이콘: 🎙️ 모양 (듣기 중 생성됨)
├── 데이터 구조: {position: {x,y or textOffset}, audioTime: "00:10:23"}
├── 저장 방식: 로컬에 JSON 형태로 관리
├── 재생 기능: 마커 클릭 시 해당 타임스탬프 위치로 이동
└── 시각적 피드백: 재생 시 마커 하이라이트 처리

3.4 설정 화면 (SettingsScreen) - 완성본

3.4.1 전체 레이아웃 구조 
Scaffold
├── AdBanner (무료 사용자만, height: 50)
└── Padding(16px)
    └── Column
        ├── 계정 및 구독 설정 섹션
        ├── SizedBox(height: 16)
        ├── 앱 설정 섹션
        ├── SizedBox(height: 16)
        ├── 듣기 설정 섹션
        ├── SizedBox(height: 16)
        ├── 쓰기 설정 섹션
        ├── SizedBox(height: 16)
        ├── 데이터 및 개인정보 섹션
        ├── SizedBox(height: 16)
        └── 고급 설정 섹션

3.4.2 설정 섹션 카드 UI (표준화)
Card (둥근 모서리, 그림자)
└── Column
    ├── 섹션 헤더
    │   └── Container(회색 배경)
    │       └── Padding(12px 16px)
    │           └── Text(섹션명, 14px, 굵게)
    └── 설정 항목들
        └── Column
            └── 설정 아이템 × N개

3.4.3 설정 아이템 UI (표준화)
Container
├── padding: EdgeInsets.all(16)
├── decoration: 하단 구분선 (마지막 항목 제외)
└── child: Row
    ├── 아이콘 영역 (20px)
    ├── SizedBox(width: 12)
    ├── Expanded: Column
    │   ├── 라벨 (14px, 굵게)
    │   └── 설명 (12px, 회색) - 선택사항
    └── 액션 영역 (조건부)
        ├── 값 표시 (12px, 파란색)
        ├── 토글 스위치
        └── 화살표 아이콘 >

3.4.4 주요 설정 섹션 내용

**계정 및 구독**
- 👤 사용자 상태 (무료/스탠다드/프리미엄)
- 📊 사용량 통계 (X개 리튼, Y개 파일)
- 🎁 프리미엄 업그레이드
- 📜 변환 이력
- ☁️ 동기화 상태

**앱 설정**
- 🎨 테마 (Classic Blue/Dark Mode/Nature Green/Sunset Orange/Monochrome Grey)
- 🌐 언어 (30개 언어 선택)
- 📱 시작 화면 (홈/듣기/쓰기/설정)
- 🔔 알림 설정

**듣기 설정**
- ⏱️ 최대 듣기 시간 (30분/1시간/2시간)
- 🎧 오디오 품질 (표준/고품질)
- 🔄 자동 재생 (ON/OFF 토글)
- 📂 저장 위치

**쓰기 설정**
- 💾 자동 저장 간격 (10초/30초/1분/3분/5분/10분)
- 📝 기본 폰트 (시스템/사용자정의)
- 📊 글자 수 표시 (ON/OFF)
- 🔍 맞춤법 검사 (ON/OFF)
- ✏️ 기본 펜 색상 (8가지 색상)
- 📏 펜 굵기 (얇음/중간/굵음)
- 📋 용지 타입 (무지/가로줄/격자)
- 🖐️ 손바닥 거부 (ON/OFF)

================================================================================

4. 공통 UI 컴포넌트 

4.1 AdBanner 컴포넌트 (무료 사용자 전용) - 완성
Widget buildAdBanner() {
  if (isPremiumUser) return SizedBox.shrink();
  
  return Container(
    height: 50,
    width: double.infinity,
    decoration: BoxDecoration(
      gradient: LinearGradient(
        colors: [Color(0xFF667eea), Color(0xFF764ba2)],
        begin: Alignment.centerLeft,
        end: Alignment.centerRight,
      ),
      border: Border(bottom: BorderSide(color: Colors.grey.shade200)),
    ),
    child: Padding(
      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
      child: Row(
        children: [
          // 광고 내용 (상태별 분기)
          Expanded(
            child: _buildAdContent(),
          ),
          SizedBox(width: 8),
          // 업그레이드 버튼
          ElevatedButton(
            onPressed: _showUpgradeDialog,
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.white.withOpacity(0.2),
              foregroundColor: Colors.white,
              minimumSize: Size(60, 28),
              textStyle: TextStyle(fontSize: 10),
            ),
            child: Text("광고 제거"),
          ),
        ],
      ),
    ),
  );
}

Widget _buildBenefit(String text) {
  return Padding(
    padding: EdgeInsets.symmetric(vertical: 2),
    child: Row(
      children: [
        Icon(Icons.check, color: Colors.green, size: 16),
        SizedBox(width: 8),
        Text(text, style: TextStyle(fontSize: 14)),
      ],
    ),
  );
}

4.5 빈 상태 컴포넌트 (EmptyStateWidget) - 완성
Widget buildEmptyState({
  required IconData icon,
  required String title,
  required String description,
  VoidCallback? onAction,
  String? actionText,
}) {
  return Center(
    child: Padding(
      padding: EdgeInsets.all(32),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            icon,
            size: 64,
            color: Colors.grey.shade400,
          ),
          SizedBox(height: 16),
          Text(
            title,
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.w600,
              color: Colors.grey.shade600,
            ),
            textAlign: TextAlign.center,
          ),
          SizedBox(height: 8),
          Text(
            description,
            style: TextStyle(
              fontSize: 14,
              color: Colors.grey.shade500,
            ),
            textAlign: TextAlign.center,
          ),
          if (onAction != null && actionText != null) ...[
            SizedBox(height: 24),
            ElevatedButton(
              onPressed: onAction,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.blue,
                foregroundColor: Colors.white,
                padding: EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
              ),
              child: Text(actionText),
            ),
          ],
        ],
      ),
    ),
  );
}

4.6 설정 아이템 컴포넌트 (SettingsItem) - 완성
Widget buildSettingsItem({
  required IconData icon,
  required String title,
  String? subtitle,
  String? value,
  bool? switchValue,
  VoidCallback? onTap,
  ValueChanged<bool>? onSwitchChanged,
  Color iconColor = Colors.blue,
}) {
  return InkWell(
    onTap: onTap,
    child: Container(
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        border: Border(
          bottom: BorderSide(color: Colors.grey.shade100),
        ),
      ),
      child: Row(
        children: [
          Container(
            width: 40,
            height: 40,
            decoration: BoxDecoration(
              color: iconColor.withOpacity(0.1),
              borderRadius: BorderRadius.circular(8),
            ),
            child: Icon(icon, color: iconColor, size: 20),
          ),
          SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  title,
                  style: TextStyle(
                    fontSize: 14,
                    fontWeight: FontWeight.w500,
                  ),
                ),
                if (subtitle != null) ...[
                  SizedBox(height: 2),
                  Text(
                    subtitle,
                    style: TextStyle(
                      fontSize: 12,
                      color: Colors.grey.shade600,
                    ),
                  ),
                ],
              ],
            ),
          ),
          if (switchValue != null)
            Switch(
              value: switchValue,
              onChanged: onSwitchChanged,
              activeColor: Colors.blue,
            )
          else if (value != null)
            Text(
              value,
              style: TextStyle(
                fontSize: 12,
                color: Colors.blue,
                fontWeight: FontWeight.w500,
              ),
            )
          else if (onTap != null)
            Icon(
              Icons.arrow_forward_ios,
              size: 16,
              color: Colors.grey.shade400,
            ),
        ],
      ),
    ),
  );
}

4.7 설정 섹션 컴포넌트 (SettingsSection) - 완성
Widget buildSettingsSection({
  required String title,
  required List<Widget> children,
}) {
  return Card(
    margin: EdgeInsets.symmetric(vertical: 8),
    elevation: 2,
    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
    child: Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Container(
          width: double.infinity,
          padding: EdgeInsets.symmetric(horizontal: 16, vertical: 12),
          decoration: BoxDecoration(
            color: Colors.grey.shade50,
            borderRadius: BorderRadius.only(
              topLeft: Radius.circular(12),
              topRight: Radius.circular(12),
            ),
          ),
          child: Text(
            title,
            style: TextStyle(
              fontSize: 14,
              fontWeight: FontWeight.w600,
              color: Colors.grey.shade700,
            ),
          ),
        ),
        ...children,
      ],
    ),
  );
}

================================================================================

5. 테마 및 디자인 시스템 

5.1 5가지 테마 시스템 (완성)

5.1.1 테마별 색상 정의
// 테마 1: 클래식 블루 (기본) - 아시아권 선호
class ClassicBlueTheme {
  static final ThemeData theme = ThemeData(
    primarySwatch: Colors.blue,
    primaryColor: Color(0xFF4A90E2),
    scaffoldBackgroundColor: Colors.white,
    appBarTheme: AppBarTheme(
      backgroundColor: Colors.white,
      foregroundColor: Colors.black87,
      elevation: 1,
    ),
    cardTheme: CardTheme(
      color: Colors.white,
      elevation: 2,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
    ),
    colorScheme: ColorScheme.light(
      primary: Color(0xFF4A90E2),
      secondary: Color(0xFF6BB6FF),
      background: Color(0xFFF5F5F5),
      surface: Colors.white,
    ),
  );
}

// 테마 2: 다크 모드 - 유럽권 선호
class DarkModeTheme {
  static final ThemeData theme = ThemeData(
    brightness: Brightness.dark,
    primarySwatch: Colors.blue,
    primaryColor: Color(0xFF64B5F6),
    scaffoldBackgroundColor: Color(0xFF121212),
    appBarTheme: AppBarTheme(
      backgroundColor: Color(0xFF1E1E1E),
      foregroundColor: Colors.white,
      elevation: 1,
    ),
    cardTheme: CardTheme(
      color: Color(0xFF1E1E1E),
      elevation: 4,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
    ),
    colorScheme: ColorScheme.dark(
      primary: Color(0xFF64B5F6),
      secondary: Color(0xFF90CAF9),
      background: Color(0xFF121212),
      surface: Color(0xFF1E1E1E),
    ),
  );
}

// 테마 3: 네이처 그린 - 아메리카권 선호
class NatureGreenTheme {
  static final ThemeData theme = ThemeData(
    primarySwatch: Colors.green,
    primaryColor: Color(0xFF4CAF50),
    scaffoldBackgroundColor: Color(0xFFF1F8E9),
    appBarTheme: AppBarTheme(
      backgroundColor: Colors.white,
      foregroundColor: Color(0xFF2E7D32),
      elevation: 1,
    ),
    cardTheme: CardTheme(
      color: Colors.white,
      elevation: 2,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
    ),
    colorScheme: ColorScheme.light(
      primary: Color(0xFF4CAF50),
      secondary: Color(0xFF81C784),
      background: Color(0xFFF1F8E9),
      surface: Colors.white,
    ),
  );
}

// 테마 4: 선셋 오렌지 - 중동/아프리카권 선호
class SunsetOrangeTheme {
  static final ThemeData theme = ThemeData(
    primarySwatch: Colors.orange,
    primaryColor: Color(0xFFFF9800),
    scaffoldBackgroundColor: Color(0xFFFFF3E0),
    appBarTheme: AppBarTheme(
      backgroundColor: Colors.white,
      foregroundColor: Color(0xFFE65100),
      elevation: 1,
    ),
    cardTheme: CardTheme(
      color: Colors.white,
      elevation: 2,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
    ),
    colorScheme: ColorScheme.light(
      primary: Color(0xFFFF9800),
      secondary: Color(0xFFFFB74D),
      background: Color(0xFFFFF3E0),
      surface: Colors.white,
    ),
  );
}

// 테마 5: 모노크롬 그레이 - 기타 지역
class MonochromeGreyTheme {
  static final ThemeData theme = ThemeData(
    primarySwatch: Colors.grey,
    primaryColor: Color(0xFF757575),
    scaffoldBackgroundColor: Color(0xFFFAFAFA),
    appBarTheme: AppBarTheme(
      backgroundColor: Colors.white,
      foregroundColor: Color(0xFF424242),
      elevation: 1,
    ),
    cardTheme: CardTheme(
      color: Colors.white,
      elevation: 2,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
    ),
    colorScheme: ColorScheme.light(
      primary: Color(0xFF757575),
      secondary: Color(0xFF9E9E9E),
      background: Color(0xFFFAFAFA),
      surface: Colors.white,
    ),
  );
}

5.2 국가별 테마 자동 선택 로직
class ThemeManager {
  static ThemeData getThemeByLocale(String languageCode, String? countryCode) {
    // 언어/국가 코드에 따른 테마 매핑
    final regionThemeMap = {
      // 아시아권 - Classic Blue
      'ko': ClassicBlueTheme.theme, // 한국어
      'ja': ClassicBlueTheme.theme, // 일본어
      'zh': ClassicBlueTheme.theme, // 중국어
      'hi': ClassicBlueTheme.theme, // 힌디어
      'bn': ClassicBlueTheme.theme, // 벵골어
      'te': ClassicBlueTheme.theme, // 텔루구어
      'mr': ClassicBlueTheme.theme, // 마라티어
      'ta': ClassicBlueTheme.theme, // 타밀어
      'th': ClassicBlueTheme.theme, // 태국어
      
      // 유럽권 - Dark Mode
      'de': DarkModeTheme.theme,    // 독일어
      'fr': DarkModeTheme.theme,    // 프랑스어
      'it': DarkModeTheme.theme,    // 이탈리아어
      'ru': DarkModeTheme.theme,    // 러시아어
      'uk': DarkModeTheme.theme,    // 우크라이나어
      'pl': DarkModeTheme.theme,    // 폴란드어
      'ro': DarkModeTheme.theme,    // 로마니아어
      'nl': DarkModeTheme.theme,    // 네덜란드어
      
      // 아메리카권 - Nature Green
      'en': NatureGreenTheme.theme, // 영어
      'es': NatureGreenTheme.theme, // 스페인어
      'pt': NatureGreenTheme.theme, // 포르투갈어
      'tl': NatureGreenTheme.theme, // 타갈로그어
      
      // 중동/아프리카권 - Sunset Orange
      'ar': SunsetOrangeTheme.theme, // 아랍어
      'fa': SunsetOrangeTheme.theme, // 페르시아어
      'ur': SunsetOrangeTheme.theme, // 우르두어
      'ps': SunsetOrangeTheme.theme, // 파슈토어
      'sw': SunsetOrangeTheme.theme, // 스와힐리어
      'ha': SunsetOrangeTheme.theme, // 하우사어
      
      // 기타 지역 - Monochrome Grey (기본값)
      'id': MonochromeGreyTheme.theme, // 인도네시아어
      'ms': MonochromeGreyTheme.theme, // 말레이어
      'tr': MonochromeGreyTheme.theme, // 터키어
    };
    
    return regionThemeMap[languageCode] ?? MonochromeGreyTheme.theme;
  }
}

5.3 공통 색상 시스템 (모든 테마에서 사용)
class AppColors {
  // 기능별 색상 (테마 무관)
  static const Color recordingColor = Color(0xFFF44336);  // 듣기 - 빨간색
  static const Color writingColor = Color(0xFF4CAF50);    // 쓰기 - 초록색
  static const Color handwritingColor = Color(0xFF9C27B0); // 필기 - 보라색
  
  // 상태 색상
  static const Color successColor = Color(0xFF4CAF50);
  static const Color warningColor = Color(0xFFFF9800);
  static const Color errorColor = Color(0xFFF44336);
  static const Color infoColor = Color(0xFF2196F3);
  
  // 회색 계열
  static const Color grey50 = Color(0xFFFAFAFA);
  static const Color grey100 = Color(0xFFF5F5F5);
  static const Color grey300 = Color(0xFFE0E0E0);
  static const Color grey600 = Color(0xFF757575);
  static const Color grey800 = Color(0xFF424242);
}

5.4 타이포그래피 시스템 (완성)
class AppTextStyles {
  // 제목
  static const TextStyle headline1 = TextStyle(
    fontSize: 24,
    fontWeight: FontWeight.bold,
    letterSpacing: -0.5,
  );
  
  static const TextStyle headline2 = TextStyle(
    fontSize: 18,
    fontWeight: FontWeight.w600,
    letterSpacing: -0.25,
  );
  
  static const TextStyle headline3 = TextStyle(
    fontSize: 16,
    fontWeight: FontWeight.w600,
  );
  
  // 본문
  static const TextStyle bodyText1 = TextStyle(
    fontSize: 16,
    fontWeight: FontWeight.normal,
    letterSpacing: 0.15,
  );
  
  static const TextStyle bodyText2 = TextStyle(
    fontSize: 14,
    fontWeight: FontWeight.normal,
    letterSpacing: 0.25,
  );
  
  // 캡션
  static const TextStyle caption = TextStyle(
    fontSize: 12,
    letterSpacing: 0.4,
  );
  
  static const TextStyle caption2 = TextStyle(
    fontSize: 10,
    letterSpacing: 0.5,
  );
  
  // 버튼
  static const TextStyle button = TextStyle(
    fontSize: 16,
    fontWeight: FontWeight.w500,
    letterSpacing: 0.75,
  );
  
  // 라벨
  static const TextStyle label = TextStyle(
    fontSize: 14,
    fontWeight: FontWeight.w500,
    letterSpacing: 0.1,
  );
}

5.5 간격 및 패딩 시스템 (완성)
class AppSpacing {
  // 기본 간격
  static const double xs = 4.0;
  static const double s = 8.0;
  static const double m = 12.0;
  static const double l = 16.0;
  static const double xl = 20.0;
  static const double xxl = 24.0;
  static const double xxxl = 32.0;
  
  // 패딩
  static const EdgeInsets paddingXS = EdgeInsets.all(xs);
  static const EdgeInsets paddingS = EdgeInsets.all(s);
  static const EdgeInsets paddingM = EdgeInsets.all(m);
  static const EdgeInsets paddingL = EdgeInsets.all(l);
  static const EdgeInsets paddingXL = EdgeInsets.all(xl);
  
  // 수직 간격
  static const SizedBox verticalSpaceXS = SizedBox(height: xs);
  static const SizedBox verticalSpaceS = SizedBox(height: s);
  static const SizedBox verticalSpaceM = SizedBox(height: m);
  static const SizedBox verticalSpaceL = SizedBox(height: l);
  static const SizedBox verticalSpaceXL = SizedBox(height: xl);
  
  // 수평 간격
  static const SizedBox horizontalSpaceXS = SizedBox(width: xs);
  static const SizedBox horizontalSpaceS = SizedBox(width: s);
  static const SizedBox horizontalSpaceM = SizedBox(width: m);
  static const SizedBox horizontalSpaceL = SizedBox(width: l);
  static const SizedBox horizontalSpaceXL = SizedBox(width: xl);
}

5.6 테두리 및 그림자 시스템 (완성)
class AppDecorations {
  // 테두리 반경
  static const BorderRadius radiusS = BorderRadius.all(Radius.circular(4));
  static const BorderRadius radiusM = BorderRadius.all(Radius.circular(8));
  static const BorderRadius radiusL = BorderRadius.all(Radius.circular(12));
  static const BorderRadius radiusXL = BorderRadius.all(Radius.circular(16));
  
  // 그림자
  static const BoxShadow shadowLight = BoxShadow(
    color: Color(0x1A000000),
    blurRadius: 4,
    offset: Offset(0, 2),
  );
  
  static const BoxShadow shadowMedium = BoxShadow(
    color: Color(0x33000000),
    blurRadius: 8,
    offset: Offset(0, 4),
  );
  
  static const BoxShadow shadowHeavy = BoxShadow(
    color: Color(0x4D000000),
    blurRadius: 12,
    offset: Offset(0, 6),
  );
  
  // 카드 데코레이션
  static const BoxDecoration cardDecoration = BoxDecoration(
    color: Colors.white,
    borderRadius: radiusL,
    boxShadow: [shadowLight],
  );
  
  // 입력 필드 데코레이션
  static const InputDecoration textFieldDecoration = InputDecoration(
    border: OutlineInputBorder(
      borderRadius: radiusM,
      borderSide: BorderSide(color: AppColors.grey300),
    ),
    focusedBorder: OutlineInputBorder(
      borderRadius: radiusM,
      borderSide: BorderSide(color: Colors.blue, width: 2),
    ),
    contentPadding: EdgeInsets.symmetric(horizontal: 16, vertical: 12),
  );
}

================================================================================

6. 반응형 디자인 및 접근성 (추가)

6.1 반응형 브레이크포인트
class ResponsiveBreakpoints {
  static const double mobile = 600;
  static const double tablet = 900;
  static const double desktop = 1200;
  
  static bool isMobile(BuildContext context) => 
      MediaQuery.of(context).size.width < mobile;
  
  static bool isTablet(BuildContext context) => 
      MediaQuery.of(context).size.width >= mobile && 
      MediaQuery.of(context).size.width < desktop;
  
  static bool isDesktop(BuildContext context) => 
      MediaQuery.of(context).size.width >= desktop;
}

6.2 접근성 가이드라인
class AccessibilityHelper {
  // 시맨틱 라벨
  static const String homeTabLabel = "홈 화면";
  static const String recordingTabLabel = "듣기 화면";
  static const String writingTabLabel = "쓰기 화면";  
  static const String settingsTabLabel = "설정 화면";
  
  // 최소 터치 영역 크기
  static const double minimumTouchTarget = 44.0;
  
  // 색상 대비율 (WCAG 2.1 AA 준수)
  static bool hasGoodContrast(Color foreground, Color background) {
    // 구현: 4.5:1 이상의 대비율 확인
    return true; // 실제 구현 필요
  }
}

6.3 RTL 언어 지원
class RTLHelper {
  static const List<String> rtlLanguages = ['ar', 'fa', 'ur', 'ps'];
  
  static bool isRTL(String languageCode) {
    return rtlLanguages.contains(languageCode);
  }
  
  static TextDirection getTextDirection(String languageCode) {
    return isRTL(languageCode) ? TextDirection.rtl : TextDirection.ltr;
  }
}

================================================================================

7. 애니메이션 및 전환 효과 (추가)

7.1 페이지 전환 애니메이션
class AppPageTransitions {
  static const Duration transitionDuration = Duration(milliseconds: 300);
  
  // 슬라이드 전환
  static Widget slideTransition(Widget child, Animation<double> animation) {
    return SlideTransition(
      position: Tween<Offset>(
        begin: const Offset(1.0, 0.0),
        end: Offset.zero,
      ).animate(CurvedAnimation(
        parent: animation,
        curve: Curves.easeInOut,
      )),
      child: child,
    );
  }
  
  // 페이드 전환
  static Widget fadeTransition(Widget child, Animation<double> animation) {
    return FadeTransition(
      opacity: animation,
      child: child,
    );
  }
}

7.2 마이크로 애니메이션
class AppAnimations {
  // 버튼 탭 애니메이션
  static Widget buttonTapAnimation({
    required Widget child,
    required VoidCallback onTap,
  }) {
    return AnimatedContainer(
      duration: Duration(milliseconds: 100),
      curve: Curves.easeInOut,
      child: GestureDetector(
        onTapDown: (_) => {/* 스케일 다운 */},
        onTapUp: (_) => {/* 스케일 업 */},
        onTap: onTap,
        child: child,
      ),
    );
  }
  
  // 로딩 인디케이터
  static Widget loadingIndicator() {
    return AnimatedContainer(
      duration: Duration(milliseconds: 1000),
      curve: Curves.easeInOut,
      child: CircularProgressIndicator(),
    );
  }
}

================================================================================

8. 개발 및 구현 가이드라인 

8.1 컴포넌트 개발 우선순위
1. **1차 개발 (핵심 MVP)**
   - AdBanner 컴포넌트
   - AppBar 컴포넌트  
   - BottomNavigationBar
   - 기본 화면들 (Home, Recording, Writing, Settings)
   - 기본 테마 시스템 (Classic Blue)

2. **2차 개발 (고급 기능)**
   - 나머지 4가지 테마 구현
   - 음성 동기화 시스템
   - 필기 모드 고급 기능
   - 설정 화면 세부 항목들

3. **3차 개발 (완성도 향상)**
   - 애니메이션 및 전환 효과
   - 접근성 기능
   - 반응형 최적화
   - 성능 최적화

8.2 코드 구조 권장사항
lib/
├── main.dart                 # 앱 진입점
├── app.dart                 # 메인 앱 설정
├── config/
│   ├── themes.dart          # 5가지 테마 정의
│   ├── colors.dart          # 공통 색상 시스템
│   ├── text_styles.dart     # 타이포그래피
│   └── constants.dart       # 상수 정의
├── widgets/
│   ├── common/
│   │   ├── ad_banner.dart
│   │   ├── custom_app_bar.dart
│   │   ├── file_badge.dart
│   │   ├── empty_state.dart
│   │   └── sync_indicator.dart
│   ├── home/
│   │   ├── note_item.dart
│   │   └── note_list.dart
│   ├── recording/
│   │   ├── recording_card.dart
│   │   ├── playback_controls.dart
│   │   └── recording_controls.dart
│   ├── writing/
│   │   ├── text_editor.dart
│   │   ├── handwriting_canvas.dart
│   │   ├── tool_palette.dart
│   │   └── mode_switcher.dart
│   └── settings/
│       ├── settings_section.dart
│       ├── settings_item.dart
│       └── upgrade_dialog.dart
├── screens/
│   ├── home_screen.dart
│   ├── recording_screen.dart
│   ├── writing_screen.dart
│   └── settings_screen.dart
├── services/
│   ├── audio_service.dart
│   ├── storage_service.dart
│   ├── theme_service.dart
│   └── localization_service.dart
└── models/
    ├── note.dart
    ├── audio_file.dart
    └── user_settings.dart

8.3 개발 체크리스트
- [ ] 30개 언어 ARB 파일 생성 및 번역
- [ ] 5가지 테마별 색상 정의 및 테스트
- [ ] 무료/스탠다드/프리미엄 기능 구분 구현
- [ ] 광고 SDK 연동 (AdMob)
- [ ] 음성 동기화 시스템 구현
- [ ] 필기 도구 및 주석 기능 구현
- [ ] RTL 언어 지원 테스트
- [ ] 접근성 테스트 (스크린 리더, 키보드 네비게이션)
- [ ] 다양한 화면 크기 테스트
- [ ] 성능 최적화 (메모리, 배터리 사용량)

================================================================================

이상으로 리튼(litten) 크로스플랫폼 노트 앱의 최종 프론트엔드 설계서를 완료했습니다.
